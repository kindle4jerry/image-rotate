!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
B	imageBMP.hpp	/^        unsigned char B;$/;"	m	struct:Pixel
CImageBMP	imageBMP.hpp	/^        CImageBMP(const unsigned v=0, const unsigned h=0):nVpix(v), nHpix(h){$/;"	f	class:CImageBMP
CImageBMP	imageBMP.hpp	/^class CImageBMP {$/;"	c
CPixel	imageBMP.hpp	/^} CPixel;$/;"	t	typeref:struct:Pixel
G	imageBMP.hpp	/^        unsigned char G;$/;"	m	struct:Pixel
HeaderInfo	imageBMP.hpp	/^        unsigned char HeaderInfo[54];$/;"	m	class:CImageBMP
MAXTHREADS	drv_c_omp_rotate.cc	/^unsigned int const MAXTHREADS = 72;$/;"	v
MAXTHREADS	drv_omp_rotate.cc	/^unsigned int const MAXTHREADS = 72;$/;"	v
Pixel	imageBMP.hpp	/^typedef struct Pixel{$/;"	s
R	imageBMP.hpp	/^        unsigned char R;$/;"	m	struct:Pixel
REPS	imageBMP.hpp	/^unsigned int const REPS = 11;$/;"	v
ReadBMP	imageBMP.cc	/^void CImageBMP::ReadBMP(string const &filename){$/;"	f	class:CImageBMP
Timer	timer.hpp	/^    Timer():last{std::chrono::steady_clock::now()} { }$/;"	f	class:Timer
Timer	timer.hpp	/^class Timer{$/;"	c
WriteBMP	imageBMP.cc	/^void CImageBMP::WriteBMP(string const &filename){$/;"	f	class:CImageBMP
_C_OMP_ROTATE_HPP_	c_omp_rotate.hpp	5;"	d
_IMAGEBMP_H_	imageBMP.hpp	5;"	d
_OMP_ROTATE_HPP_	omp_rotate.hpp	5;"	d
_TIMER_HPP_	timer.hpp	6;"	d
arguments	c_omp_rotate.cc	/^vector<string> arguments(int argc, char* argv[])$/;"	f
arguments	omp_rotate.cc	/^vector<string> arguments(int argc, char* argv[])$/;"	f
c_omp_rotate	c_omp_rotate.cc	/^void c_omp_rotate(CImageBMP &in, double const &rotAngle, CImageBMP &out)$/;"	f
last	timer.hpp	/^    std::chrono::steady_clock::time_point last;$/;"	m	class:Timer
main	drv_c_omp_rotate.cc	/^int main(int argc, char** argv) {$/;"	f
main	drv_omp_rotate.cc	/^int main(int argc, char** argv) {$/;"	f
nHpix	imageBMP.hpp	/^        unsigned int nHpix;       \/\/ column, widith of the image$/;"	m	class:CImageBMP
nVpix	imageBMP.hpp	/^        unsigned int nVpix;       \/\/ row, height of the image$/;"	m	class:CImageBMP
omp_rotate	omp_rotate.cc	/^void omp_rotate(CImageBMP &in, double const &rotAngle, CImageBMP &out)$/;"	f
operator ()	imageBMP.hpp	/^        CPixel operator() (unsigned int const row, unsigned int const col) const {$/;"	f	class:CImageBMP
operator ()	imageBMP.hpp	/^        CPixel& operator()(unsigned int const row, unsigned int const col){$/;"	f	class:CImageBMP
pixMat	imageBMP.hpp	/^        std::vector<CPixel> pixMat;$/;"	m	class:CImageBMP
printDiff	timer.hpp	/^    double printDiff(const std::string& msg = "Timer diff: ") {$/;"	f	class:Timer
set_header	imageBMP.hpp	/^        void set_header(unsigned char in[54]){std::copy(in, in+54, HeaderInfo);}$/;"	f	class:CImageBMP
